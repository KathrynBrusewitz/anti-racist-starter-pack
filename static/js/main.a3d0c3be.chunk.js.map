{"version":3,"sources":["useArspApi.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useArspApi","url","useState","data","isFetching","dataState","setDataState","endpointUrl","useEffect","a","d","axios","get","response","console","log","fetchDataFromApi","App","books","articles","docs","podcasts","talks","className","href","target","rel","map","item","key","id","link","title","author","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3d0c3be.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\n\n/**\n * Dev Notes:\n * The reason for writing 'setDataState(d => ...)' is because 'dataState' is only used the 'setDataState' call.\n * Otherwise, the rule for React Hook useEffect will be broken because it would be missing 'dataState' as a dependency\n * and it will then ask for it to be included (resulting in a render loop) or for the dependency array to be\n * removed (also resulting in a loop).\n */\n\nconst useArspApi = (url: string) => {\n  const [dataState, setDataState] = useState({ data: [], isFetching: false });\n  const [endpointUrl] = useState(url);\n\n  useEffect(() => {\n    const fetchDataFromApi = async () => {\n      try {\n        setDataState((d) => ({ ...d, isFetching: true }));\n        const response = await axios.get(endpointUrl);\n        setDataState((d) => ({\n          ...d,\n          data: response.data,\n          isFetching: false,\n        }));\n      } catch (e) {\n        console.log(e);\n        setDataState((d) => ({ ...d, isFetching: false }));\n      }\n    };\n    fetchDataFromApi();\n  }, [endpointUrl]);\n\n  return [dataState];\n};\n\nexport default useArspApi;\n","import React from 'react';\nimport './App.css';\nimport useArspApi from './useArspApi';\nimport { Book, Article, Documentary, Podcast, Talk } from './types';\n\n// ENDPOINTS\nconst BOOKS_URL = 'https://arsp-cms.herokuapp.com/books';\nconst ARTICLES_URL = 'https://arsp-cms.herokuapp.com/articles';\nconst DOCS_URL = 'https://arsp-cms.herokuapp.com/documentaries';\nconst PODCASTS_URL = 'https://arsp-cms.herokuapp.com/podcasts';\nconst TALKS_URL = 'https://arsp-cms.herokuapp.com/talks';\n\nfunction App() {\n  const [books] = useArspApi(BOOKS_URL);\n  const [articles] = useArspApi(ARTICLES_URL);\n  const [docs] = useArspApi(DOCS_URL);\n  const [podcasts] = useArspApi(PODCASTS_URL);\n  const [talks] = useArspApi(TALKS_URL);\n\n  return (\n    <div className='page'>\n      <h1>anti-racist starter pack</h1>\n\n      <div className='selectionby'>\n        a selection by Danah Kowdan /{' '}\n        <a\n          className='selectionbylink'\n          href='https://www.instagram.com/danahkowdan/'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          @danahkowdan\n        </a>\n      </div>\n\n      <div className='contributionsby'>contributions by Jalyse Cuff and Fatima Kowdan</div>\n\n      <h2>books</h2>\n      {books.isFetching && <p>Loading books...</p>}\n      {books.data.map((item: Book) => (\n        <div className='item' key={item.id}>\n          <a className='link' href={item.link} target='_blank' rel='noopener noreferrer'>\n            <b>{item.title}</b> by {item.author}\n          </a>\n        </div>\n      ))}\n\n      <h2>articles</h2>\n      {articles.isFetching && <p>Loading articles...</p>}\n      {articles.data.map((item: Article) => {\n        const author = item.author ? ` by ${item.author}` : ``;\n        return (\n          <div className='item' key={item.id}>\n            <a className='link' href={item.link} target='_blank' rel='noopener noreferrer'>\n              <b>{item.title}</b>\n              {author}\n            </a>\n          </div>\n        );\n      })}\n\n      <h2>podcasts</h2>\n      {podcasts.isFetching && <p>Loading podcasts...</p>}\n      {podcasts.data.map((item: Podcast) => {\n        const author = item.author ? ` - ${item.author}` : ``;\n        return (\n          <div className='item' key={item.id}>\n            <a className='link' href={item.link} target='_blank' rel='noopener noreferrer'>\n              <b>{item.title}</b>\n              {author}\n            </a>\n          </div>\n        );\n      })}\n\n      <h2>interviews/lectures</h2>\n      {talks.isFetching && <p>Loading interviews and lectures...</p>}\n      {talks.data.map((item: Talk) => {\n        const author = item.author ? ` - ${item.author}` : ``;\n        return (\n          <div className='item' key={item.id}>\n            <a className='link' href={item.link} target='_blank' rel='noopener noreferrer'>\n              <b>{item.title}</b>\n              {author}\n            </a>\n          </div>\n        );\n      })}\n\n      <h2>documentaries</h2>\n      {docs.isFetching && <p>Loading documentaries...</p>}\n      {docs.data.map((item: Documentary) => {\n        return (\n          <div className='item' key={item.id}>\n            <a className='link' href={item.link} target='_blank' rel='noopener noreferrer'>\n              <b>{item.title}</b>\n            </a>\n          </div>\n        );\n      })}\n\n      <a className='builtby' href='https://github.com/KathrynBrusewitz' target='_blank' rel='noopener noreferrer'>\n        built by @kathrynbrusewitz\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}